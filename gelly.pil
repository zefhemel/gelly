import "ast.pil"
import "parser.pil"
//import "evaluator.pil"
import "rewrite.pil"
import "/Users/zef/svn/pil/src/lib/io.pil"

import gel
import gelly::rewrite

Term gelly::rewrite::buildPattern = replaceMatchVar(new Parser("![ m_t ]").acceptExp(), "m_");
Term gelly::rewrite::matchPattern = replaceMatchVar(new Parser("?[ m_t ]").acceptExp(), "m_");
Term gelly::rewrite::importPattern = replaceMatchVar(new Parser(":import m_fn").acceptExp(), "m_");
Term gelly::rewrite::showBindingsPattern = new Parser(":bindings").acceptExp();
Term seqPattern = replaceMatchVar(new Parser("m_f1; m_f2").acceptExp(), "m_");

Array<Function2<Bool, Term, Interpreter>> primitives = new Array<Function2<Bool, Term, Interpreter>>(
  Bool(Term t, Interpreter i) { gelly::rewrite::prim::seq(t, i) },
  Bool(Term t, Interpreter i) { gelly::rewrite::prim::build(t, i) },
  Bool(Term t, Interpreter i) { gelly::rewrite::prim::apply(t, i) },
  Bool(Term t, Interpreter i) { gelly::rewrite::prim::import(t, i) },
  Bool(Term t, Interpreter i) { gelly::rewrite::prim::match(t, i) }
);

Bool gelly::rewrite::prim::build(Term t, Interpreter i) {
  var m = new Map<String, Term>();
  if(buildPattern.match(t, m)) {
    i.currentTerm = replaceMatchVar(m["m_t"], "m_").construct(i.bindings);
    return true;
  } else {
    return false;
  }
}

Bool gelly::rewrite::prim::seq(Term t, Interpreter i) {
  var m = new Map<String, Term>();
  if(seqPattern.match(t, m)) {
    if(i.eval(m["m_f1"])) {
      return i.eval(m["m_f2"]);
    }
  }
  return false;
}

Bool gelly::rewrite::prim::apply(Term t, Interpreter i) {
  var m = new Map<String, Term>();
  if(t instanceof SymbolTerm) {
    var ruleName = t.as<SymbolTerm>.symbol;
    if(ruleName == "debug") {
      println(i.currentTerm);
      return true;
    }
  }
  return false;
}

Bool gelly::rewrite::prim::match(Term t, Interpreter i) {
  var m = new Map<String, Term>();
  if(matchPattern.match(t, m)) {
    var t2 = replaceMatchVar(m["m_t"], "m_");
    return t2.match(i.currentTerm, i.bindings);
  }
  return false;
}

Bool gelly::rewrite::prim::import(Term t, Interpreter i) {
  var m = new Map<String, Term>();
  if(importPattern.match(t, m)) {
    try {
      var filename = m["m_fn"].as<StringTerm>.value;
      var f = new pil::io::ReadFile(filename);
      var content = f.readAll();
      return i.evalString(content);
    } catch(Exception e) {
      println("Could not read file.");
    }
  }
  return false;
}

class gelly::rewrite::Interpreter {
  Term currentTerm = null;
  Map<String, Term> bindings = new Map<String, Term>();

  void evalShowBindings(Term t) {
    var m = new Map<String, Term>();
    if(showBindingsPattern.match(t, m)) {
      println(bindings);
    }
  }


  /*
  Term apply(String ruleName, Term t) {
    if(ruleDefs.contains(ruleName)) {
      var rule = ruleDefs[ruleName];
      var m = new Map<String, Term>();
      rulePattern.match(rule, m);
      var m2 = new Map<String, Term>();
      if(m["m_lh"].match(t, m2)) {
        currentTerm = replaceMatchVar(m["m_rh"], "m_").construct(m2);
        return currentTerm;
      } else {
        throw new Exception("Could not apply!");
      }
    } else {
      throw new Exception("No rule named " + ruleName);
    }
  }


  */

  Bool eval(Term t) {
    for(Function2<Bool, Term, Interpreter> f : primitives) {
      if(f(t, this)) {
        return true;
      }
    }
    return false;
  }

  Bool evalString(String input) {
    var p = new Parser(input);
    var t = p.acceptExp();
    if(t != null) {
      return eval(t);
    }
    return false;
  }
}

void main(Array<String> args) {
  //evalInit();
  String input = null;
  println("Welcome to gelly, type :q to quit.");
  var interp = new Interpreter();
  if(interp.evalString(":import \"test.g\"")) {
    println(interp.currentTerm.toIndentedString(0));
  } else {
    println("Rewriting failed.");
  }
  /*
  while(input != ":q") {
    print("> ");
    input = readln();
    if(input != ":q") {
      println(new Parser(input).acceptExp().toIndentedString(0));
      //interp.eval(input);
    }
  }
  */
  /*
  println(new Parser("if: 3 == 0").acceptExp().toIndentedString(0));
  println(new Parser("if 3 + if 8").acceptExp().toIndentedString(0));
  println(new Parser("say \"Zef\" to: out").acceptExp().toIndentedString(0));
  println(new Parser("a.b 20 + 8 + 4").acceptExp().toIndentedString(0));
  */
  /*
  var m = new Map<String, Term>();
  println(t.match(matchTerm, m));
  println(m);
  */
}
