import gelly
import gelly::util

class gelly::Term {
  String toIndentedString(Int depth) {
    return this.as<String>;
  }
}

String gelly::util::spaces(Int n) {
  var m = new MutableString();
  for(Int i = 0; i < n; i++) {
    m.append("  ");
  }
  return m.as<String>;
}

class gelly::MessageSendTerm extends gelly::Term {
  Term object = null;
  String message = null;
  Array<Term> arguments = null;

  new(Term object, String message, Array<Term> arguments) {
    this.object = object;
    this.message = message;
    this.arguments = arguments;
  }

  String toIndentedString(Int depth) {
    var s = new MutableString();
    s.append(spaces(depth));
    s.append("(");
    if(object != null) {
      s.append(object.as<String>);
      s.append(" ");
    }
    s.append(message);
    var sawCons = false;
    for(Term t: arguments) {
      if(t instanceof MessageSendTerm) {
        s.append("\n");
        sawCons = true;
      } else {
        s.append(' ');
      }
      s.append(t.toIndentedString(depth+1));
    }
    s.append(')');
    return s.as<String>;
  }

  as<String> {
    return toIndentedString(0);
  }
}

class gelly::BlockTerm extends gelly::Term {
  Array<Term> statements = null;

  new(Array<Term> statements) {
    this.statements = statements;
  }

  String toIndentedString(Int depth) {
    var s = new MutableString();
    s.append("[\n");
    for(Term t : statements) {
      s.append(t.toIndentedString(depth+1));
      s.append('\n');
    }
    s.append(spaces(depth));
    s.append("]");
    return s.as<String>;
  }

  as<String> {
    return toIndentedString(0);
  }
}

class gelly::MethodDefTerm extends gelly::Term {
  MessageSendTerm signature = null;
  Array<Term> statements = null;

  new(MessageSendTerm signature, Array<Term> statements) {
    this.signature = signature;
    this.statements = statements;
  }

  String toIndentedString(Int depth) {
    var s = new MutableString();
    s.append(signature.as<String>);
    s.append(" [\n");
    for(Term t : statements) {
      s.append(t.toIndentedString(depth+1));
      s.append('\n');
    }
    s.append(spaces(depth));
    s.append("]");
    return s.as<String>;
  }

  as<String> {
    return toIndentedString(0);
  }
}

class gelly::AssignTerm extends gelly::Term {
  Term lhs = null;
  Term value = null;

  new(Term lhs, Term value) {
    this.lhs = lhs;
    this.value = value;
  }

  String toIndentedString(Int depth) {
    var s = new MutableString();
    s.append("(=\n");
    s.append(spaces(depth) + lhs.toIndentedString(depth+1) + "\n");
    s.append(spaces(depth) + value.toIndentedString(depth+1));
    s.append(")");
    return s.as<String>;
  }
}

class gelly::IntTerm extends gelly::Term {
  Int value = 0;

  new(Int value) {
    this.value = value;
  }

  Bool ==(Object o) {
    if(o == null) {
      return false;
    }
    if(o instanceof IntTerm) {
      return o.as<IntTerm>.value == value;
    } else {
      return false;
    }
  }

  as<String> {
    var ms = new MutableString();
    ms.append(value);
    return ms.as<String>;
  }
}

class gelly::StringTerm extends gelly::Term {
  String value = null;

  new(String value) {
    this.value = value;
  }

  Bool ==(Object o) {
    if(o == null) {
      return false;
    }
    if(o instanceof StringTerm) {
      return o.as<StringTerm>.value == value;
    } else {
      return false;
    }
  }

  as<String> {
    return "\"" + value + "\"";
  }
}

class gelly::IdnTerm extends gelly::Term {
  String idn = null;

  new(String idn) {
    this.idn = idn;
  }

  as<String> {
    return idn;
  }
}

