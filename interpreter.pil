import "ast.pil"
import "object.pil"
import "builtin/object.pil"
import "builtin/string.pil"

import gelly
import gelly::exception

Map<String, GLClass> gelly::rootNamespace = new Map<String, GLClass>();


void gelly::initInterpreter() {
  rootNamespace["Object"] = gelly::builtin::object::init();
  var object = rootNamespace["Object"];
  var method = new GLClass(object, "Method");
  rootNamespace["Method"] = object;
  rootNamespace["String"] = gelly::builtin::string::init();
}


class gelly::Env {
  GLObject self = null;
  Map<String, GLObject> variables = new Map<String, GLObject>();

  new(GLObject self) {
    this.self = self;
  }

  GLObject lookupVar(String var) {
    if(var == "self") {
      return self;
    } else if(variables.contains(var)) {
      return variables[var];
    } else if(rootNamespace.contains(var)) {
      return rootNamespace[var];
    } else {
      throw new Exception("Variable undefined: " + var);
    }
  }

  void evalStatements(Term stats) {
    if(stats instanceof BlockTerm) {
      for(Term t : stats.as<BlockTerm>.statements) {
        evalStatement(t);
      }
    } else {
      throw new Exception("Can't handle: " + stats.as<String>);
    }
  }

  void evalStatement(Term stat) {
    if(stat instanceof AssignTerm) {
      var assign = stat.as<AssignTerm>;
      variables[assign.lhs.as<IdnTerm>.idn] = evalExp(assign.value);
    } else {
      evalExp(stat);
    }
  }

  GLObject evalExp(Term exp) {
    if(exp instanceof IdnTerm) {
      return lookupVar(exp.as<IdnTerm>.idn);
    } else if(exp instanceof StringTerm) {
      return new GLString(exp.as<StringTerm>.value);
    } else if(exp instanceof MessageSendTerm) {
      var ms = exp.as<MessageSendTerm>;
      var o = evalExp(ms.object);
      var method = o.getMethod(ms.message);
      var args = new Array<GLObject>(ms.arguments.length);
      for(Int i = 0; i < ms.arguments.length; i++) {
        args[i] = evalExp(ms.arguments[i]);
      }
      return method.invoke(o, args);
    } else {
      throw new Exception("Unsupported expression: " + exp.as<String>);
    }
  }
}
