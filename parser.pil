import "ast.pil"

import gelly
import gelly::util

class gelly::ParseException extends Exception {
  new(String message) extends super(message) {
  }
}

class gelly::Parser {
  String text = "";
  Int i = 0;

  Array<Array<String>> operators = new Array<Array<String>>(
    new Array<String>("."),
    new Array<String>("*", "/", "%"),
    new Array<String>("+", "-"),
    new Array<String>("<", "<=", ">", ">="),
    new Array<String>("!",  "=", "+=", "-=", "*=", ":="),
    new Array<String>("&"),
    new Array<String>("|"),
    new Array<String>("?", ":", "$"),
    new Array<String>(","),
    new Array<String>("keyword"),
    new Array<String>(";")
    );

  List<Char> allOps = new List<Char>('!', '@', '#', '%', '^', '&', '*', '-', '+', '=', '|', '/', '\\', '<', '>', '.', '?');

  new(String text) {
    this.text = text;
  }

  Term acceptFactor() {
    var in = acceptInt();
    if(in != -1) {
      return new IntTerm(in);
    }
    var sym = acceptSymbol();
    if(sym != null) {
      return new SymbolTerm(sym);
    }
    var v = acceptIdn();
    if(v != null) {
      return new IdnTerm(v);
    }
    var s = acceptString();
    if(s != null) {
      return new StringTerm(s);
    }
    if(accept('(')) {
      acceptWhiteSpace();
      var exp = acceptExp();
      acceptWhiteSpace();
      expect(')');
      return exp;
    }
    if(accept('[')) {
      acceptWhiteSpace();
      var stats = new List<Term>();
      while(!accept(']')) {
        var exp = acceptExp();
        acceptWhiteSpace();
        stats.add(exp);
      }
      return new BlockTerm(stats.as<Array<Term>>);
    }
    return null;
  }

  Term acceptGeneric(Int level) {
    Term f = null;
    if(level == 0) {
      f = acceptFactor();
    } else {
      f = acceptGeneric(level-1);
    }
    if(f == null) {
      return null;
    }
    var t = f;
    var oldI = i;
    acceptWhiteSpace();
    var op = acceptOps(operators[level]);
    acceptWhiteSpace();
    while(op != null) {
      Term t2 = null;
      t2 = acceptGeneric(level);
      t = new MessageSendTerm(t, op, new Array<Term>(t2));
      oldI = i;
      op = acceptOps(operators[level]);
      acceptWhiteSpace();
    }
    i = oldI;
    return t;
  }

  Term acceptPostfix() {
    var t = acceptGeneric(operators.length-1);
    var oldI = i;
    acceptWhiteSpace();
    var idn = acceptIdn();
    if(idn != null && !accept(':')) {
      return new MessageSendTerm(t, idn, new Array<Term>());
    } else {
      i = oldI;
      return t;
    }
  }

  Term acceptMS() {
    var t = acceptPostfix();
    var selector = new MutableString();
    var args = new List<Term>();
    acceptWhiteSpace();
    var kw = acceptKeyword();
    while(kw != null) {
      selector.append(kw);
      acceptWhiteSpace();
      var arg = acceptPostfix();
      args.add(arg);
      acceptWhiteSpace();
      kw = acceptKeyword();
    }
    if(args.length > 0) {
      return new MessageSendTerm(t, selector.as<String>, args.as<Array<Term>>);
    } else {
      return t;
    }
  }

  Term acceptExp() {
    acceptWhiteSpace();
    var t = acceptMS();
    return t;
  }

  Bool acceptWhiteSpace() {
    var oldI = i;
    while(i < text.length && (text[i] == ' ' || text[i] == '\t' || text[i] == '\n' || text[i] == '\r' || lookAhead("//") || lookAhead("/*"))) { 
      if(lookAhead("//")) {
        while(i < text.length && text[i] != '\n' && text[i] != '\r') {
          i++;
        }
      } else if(lookAhead("/*")) {
        while(i < text.length && !lookAhead("*/")) {
          i++;
        }
        if(lookAhead("*/")) {
          i = i + 2;
        }
      } else {
        i++;
      }
    }
    return oldI != i;
  }

  void printRest() {
    var m = new MutableString();
    for(Int j = i; j < text.length; j++) {
      m.append(text[j]);
    }
    print("Rest: |");
    println(m.as<String>);
  }

  Bool lookAhead(String str) {
    var parsedSomething = false;
    for(Int j = 0; j < str.length && i+j < text.length; j++) {
      if(text[j+i] != str[j]) {
        return false;
      }
      if(i+j+1 == text.length && j+1 < str.length) {
        return false;
      }
      parsedSomething = true;
    }
    return parsedSomething;
  }

  String acceptOps(Array<String> ops) {
    for(String op : ops) {
      if(lookAhead(op)) {
        var opstr = new MutableString(op);
        var oldI = i;
        i = i + op.length;
        while(i < text.length && allOps.contains(text[i])) {
          opstr.append(text[i]);
          i++;
        }
        if(text[i-1] != '=' || opstr.as<String> == op) {
          return opstr.as<String>;
        } else {
          i = oldI;
        }
      }
    }
    return null;
  }

  String acceptKeyword() {
    var oldI = i;
    var idn = acceptIdn();
    if(idn == null) {
      return null;
    } 
    if(accept(':')) {
      return idn + ":";
    } else {
      i = oldI;
      return null;
    }
  }


  Int acceptInt() {
    if(i == text.length) {
      return -1;
    }
    var s = new MutableString();
    if(text[i] >= '0' && text[i] <= '9') {
      while(i < text.length && text[i] >= '0' && text[i] <= '9') {
        s.append(text[i]);
        i++;
      }
      return s.as<Int>;
    } else {
      return -1;
    }
  }

  String acceptString() {
    if(i == text.length) {
      return null;
    }
    var s = new MutableString();
    if(text[i] == '"') {
      i++;
      while(i < text.length && text[i] != '"' && text[i-1] != '\\') {
        if(!(text[i] == '\\' && i < (text.length + 1) && text[i+1] == '"')) {
          s.append(text[i]);
        }
        i = i + 1;
      }
      i = i + 1;
      return s.as<String>;
    } else {
      return null;
    }
  }

  Bool accept(Char c) {
    if(i == text.length) {
      return false;
    }
    if(text[i] == c) {
      i++;
      return true;
    } else {
      return false;
    }
  }

  void expect(Char c) {
    if(i == text.length) {
      print("Rest of the buffer: ");
      printRest();
      throw new ParseException("Expected: " + c.as<String>);
    }
    if(text[i] == c) {
      i++;
    } else {
      print("Rest of the buffer: ");
      printRest();
      throw new ParseException("Expected: " + c.as<String>);
    }
  }

  String acceptSymbol() {
    if(!accept(':')) {
      return null;
    }
    var idn = acceptIdn();
    return idn;
  }

  String acceptIdn() {
    if(i == text.length) {
      return null;
    }
    var oldI = i;
    var sym = new MutableString();
    if((text[i] >= 'a' && text[i] <= 'z') || 
                              (text[i] >= 'A' && text[i] <= 'Z') ||
                              (text[i] == '_')) {
      sym.append(text[i]);
      i++;
    } else {
      return null;
    }
    // Read constructor
    while(i < text.length && ((text[i] >= 'a' && text[i] <= 'z') || 
                              (text[i] >= 'A' && text[i] <= 'Z') ||
                              (text[i] >= '0' && text[i] <= '9') ||
                              (text[i] == '_') || (text[i] == '-'))) {
      sym.append(text[i]);
      i++;
    }
    while(i > 1 && text[i-1] == '-') {
      i--;
      sym.remove(sym.length-1);
    }
    return sym.as<String>;
  }
}
