import "ast.pil"
import "rewrite.pil"

import gel
import gelly::rewrite

Term gelly::rewrite::buildPattern = replaceMatchVar(new Parser("![ `t ]").acceptExp());
Term gelly::rewrite::matchPattern = replaceMatchVar(new Parser("?[ `t ]").acceptExp());
Term gelly::rewrite::importPattern = replaceMatchVar(new Parser("import `fn").acceptExp());
Term gelly::rewrite::seqPattern = replaceMatchVar(new Parser("`f1; `f2").acceptExp());
Term gelly::rewrite::leftChoicePattern = replaceMatchVar(new Parser("`f1 <+ `f2").acceptExp());
Term gelly::rewrite::strategyDefPattern = replaceMatchVar(new Parser("strategy `name (`strparam)[`valparam] { `steps }").acceptExp());
Term gelly::rewrite::strategyCallPattern = replaceMatchVar(new Parser("`name(`strparam)[`valparam]").acceptExp());
Term gelly::rewrite::strategyCallNoStrParamPattern = replaceMatchVar(new Parser("`name[`valparam]").acceptExp());
Term gelly::rewrite::strategyCallNoValParamPattern = replaceMatchVar(new Parser("`name(`strparam)").acceptExp());
Term gelly::rewrite::strategyCallNoStrParamNoValParamPattern = replaceMatchVar(new Parser("`name").acceptExp());

Array<Function2<Bool, Term, Env>> gelly::rewrite::primitiveConstructs = new Array<Function2<Bool, Term, Env>>(
  Bool(Term t, Env env) { gelly::rewrite::prim::strategyCall(t, env) },
  Bool(Term t, Env env) { gelly::rewrite::prim::import(t, env) },
  Bool(Term t, Env env) { gelly::rewrite::prim::strategyDef(t, env) },
  Bool(Term t, Env env) { gelly::rewrite::prim::seq(t, env) },
  Bool(Term t, Env env) { gelly::rewrite::prim::leftChoice(t, env) },
  Bool(Term t, Env env) { gelly::rewrite::prim::build(t, env) },
  Bool(Term t, Env env) { gelly::rewrite::prim::match(t, env) }
);

Bool gelly::rewrite::prim::build(Term t, Env env) {
  var m = new Map<String, Term>();
  if(buildPattern.match(t, m)) {
    env.currentTerm = replaceMatchVar(m["t"]).construct(env.bindings);
    return true;
  } else {
    return false;
  }
}

Bool gelly::rewrite::prim::strategyDef(Term t, Env env) {
  var m = new Map<String, Term>();
  if(strategyDefPattern.match(t, m)) {
    if(!(m["name"] instanceof SymbolTerm)) {
      return false;
    }
    String name = m["name"].as<SymbolTerm>.symbol;
    String strArgName = null;
    String valArgName = null;
    Bool valArgPassByValue = true;
    if(!(m["strparam"] instanceof EmptyTerm)) {
      strArgName = m["strparam"].as<SymbolTerm>.symbol;
    }
    if(!(m["valparam"] instanceof EmptyTerm)) {
      if(m["valparam"] instanceof SymbolTerm) {
        valArgName = m["valparam"].as<SymbolTerm>.symbol;
      } else {
        valArgName = m["valparam"].as<OpTerm>.right.as<SymbolTerm>.symbol;
        valArgPassByValue = false;
      }
    }
    env.strategies[name] = new StrategyDef(strArgName, valArgName, valArgPassByValue, m["steps"]);
    return true;
  }
  return false;
}

Bool gelly::rewrite::prim::seq(Term t, Env env) {
  var passedOnce = false;
  while(t instanceof OpTerm && t.as<OpTerm>.op == ";") {
    var t2 = t.as<OpTerm>;
    if(!env.eval(t2.left)) {
      return false;
    } else {
      t = t2.right;
    }
    passedOnce = true;
  }
  if(passedOnce) {
    return env.eval(t);
  } else {
    return false;
  }
}

Bool gelly::rewrite::prim::leftChoice(Term t, Env env) {
  var m = new Map<String, Term>();
  if(leftChoicePattern.match(t, m)) {
    if(env.eval(m["f1"])) {
      return true;
    } else {
      return env.eval(m["f2"]);
    }
  }
  return false;
}

class gelly::rewrite::StrArgStrategy {
  Term t = null;
  Env e = null;

  new(Env e, Term t) {
    this.e = e;
    this.t = t;
  }
}

Bool gelly::rewrite::prim::strategyCall(Term t, Env env) {
  var m = new Map<String, Term>();
  if(strategyCallNoStrParamPattern.match(t, m)) {
    m["strparam"] = new EmptyTerm();
  } else if(strategyCallNoValParamPattern.match(t, m)) {
    m["valparam"] = new EmptyTerm();
  } else if(strategyCallNoStrParamNoValParamPattern.match(t, m)) {
    if(m["name"] instanceof SymbolTerm) {
      m["valparam"] = new EmptyTerm();
      m["strparam"] = new EmptyTerm();
    } else {
      return false;
    }
  } else if(strategyCallPattern.match(t, m)) {
    // Nuthin'
  } else {
    return false;
  }
  var strategyName = m["name"].as<SymbolTerm>.symbol;
  if(strategyName == "debug") {
    if(!(m["valparam"] instanceof EmptyTerm)) {
      print(m["valparam"]);
    }
    println(env.currentTerm.toIndentedString(0));
    return true;
  } else if(strategyName == "id") {
    return true;
  } else if(strategyName == "fail") {
    return false;
  } else if(strategyName == "eval") {
    var newStr = new Env(env.strategies.clone(), env.closureStrategies.clone(), env.bindings.clone());
    newStr.currentTerm = env.currentTerm;
    if(!newStr.eval(m["valparam"])) {
      return false;
    }
    return env.eval(newStr.currentTerm);
  } else if(strategyName == "all" || strategyName == "one") {
    if(env.currentTerm instanceof OpTerm) {
      var stratT = m["strparam"];
      var successful = true;
      var newT = env.currentTerm.as<OpTerm>.clone();
      var oldCurrentTerm = env.currentTerm;
      if(newT.left != null) {
        env.currentTerm = newT.left;
        if(strategyName == "all") {
          successful = successful && gelly::rewrite::prim::strategyCall(stratT, env);
        } else if(strategyName == "one") {
          if(gelly::rewrite::prim::strategyCall(stratT, env)) {
            newT.left = env.currentTerm;
            env.currentTerm = newT;
            return true;
          } else {
            successful = false;
          }
        }
        if(successful) {
          newT.left = env.currentTerm;
        }
      }
      if(newT.right != null) {
        env.currentTerm = newT.right;
        if(strategyName == "all") {
          successful = successful && gelly::rewrite::prim::strategyCall(stratT, env);
        } else if(strategyName == "one") {
          if(gelly::rewrite::prim::strategyCall(stratT, env)) {
            newT.right = env.currentTerm;
            env.currentTerm = newT;
            return true;
          } else {
            successful = false;
          }
        }
        if(successful) {
          newT.right = env.currentTerm;
        }
      }
      if(successful) {
        env.currentTerm = newT;
        return true;
      } else {
        env.currentTerm = oldCurrentTerm;
        return false;
      }
    } else if(env.currentTerm instanceof GroupTerm) {
      var stratT = m["strparam"];
      var successful = true;
      var newT = env.currentTerm.as<GroupTerm>.clone();
      var oldCurrentTerm = env.currentTerm;
      env.currentTerm = newT.group;
      if(strategyName == "all") {
        successful = successful && gelly::rewrite::prim::strategyCall(stratT, env);
      } else if(strategyName == "one") {
        if(gelly::rewrite::prim::strategyCall(stratT, env)) {
          newT.group = env.currentTerm;
          env.currentTerm = newT;
          return true;
        } else {
          successful = false;
        }
      }
      if(successful) {
        newT.group = env.currentTerm;
        env.currentTerm = newT;
        return true;
      } else {
        env.currentTerm = oldCurrentTerm;
        return false;
      }
    } else if(strategyName == "one") { // One fails on non-cons terms
      return false;
    } else {
      return true;
    }
  } else {
    if(env.strategies.contains(strategyName)) {
      var str = env.strategies[strategyName];
      var newStr = new Env(env.strategies.clone(), env.closureStrategies.clone(), new Map<String, Term>()); //env.bindings.clone()); //new Map<String, Term>());
      newStr.currentTerm = env.currentTerm;
      if(!(m["strparam"] instanceof EmptyTerm)) {
        newStr.closureStrategies[str.strArgName] = new ClosureStrategyDef(env, m["strparam"]);
      }
      if(!(m["valparam"] instanceof EmptyTerm)) {
        if(str.valArgPassByValue) {
          var oldT = env.currentTerm;
          if(!env.eval(m["valparam"])) {
            return false;
          }
          newStr.bindings[str.valArgName] = env.currentTerm;
          env.currentTerm = oldT;
        } else {
          newStr.bindings[str.valArgName] = m["valparam"];
        }
      }
      if(newStr.eval(str.t)) {
        env.currentTerm = newStr.currentTerm;
        return true;
      } else {
        return false;
      }
    } else if(env.closureStrategies.contains(strategyName)) {
      ClosureStrategyDef str = env.closureStrategies[strategyName];
      var newStr = new Env(str.parent.strategies, str.parent.closureStrategies, str.parent.bindings);
      newStr.currentTerm = env.currentTerm;
      if(newStr.eval(str.t)) {
        env.currentTerm = newStr.currentTerm;
        return true;
      } else {
        return false;
      }
    } else {
      println("No such strategy: " + strategyName);
    }
  }
  return false;
}

Bool gelly::rewrite::prim::match(Term t, Env env) {
  var m = new Map<String, Term>();
  if(matchPattern.match(t, m)) {
    var t2 = replaceMatchVar(m["t"]);
    return t2.match(env.currentTerm, env.bindings);
  }
  return false;
}

Bool gelly::rewrite::prim::import(Term t, Env env) {
  var m = new Map<String, Term>();
  if(importPattern.match(t, m)) {
    //try {
      var filename = m["fn"].as<StringTerm>.value;
      var f = new pil::io::ReadFile(filename);
      var content = f.readAll();
      return env.evalString(content);
    //} catch(Exception e) {
      //println("Could not read file.");
    //}
  }
  return false;
}
