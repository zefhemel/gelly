import "object.pil"

import gelly
import gelly::exception

GLClass gelly::builtin::object::init() {
  var object = new GLClass(null, "Object");

  object.methods["new"] = new gelly::builtin::object::NewInstanceMethod();
  object.methods["defineInstanceMethods:"] = new gelly::builtin::object::DefineMethods(true);
  object.methods["defineMethods:"] = new gelly::builtin::object::DefineMethods(false);

  object.instanceMethods["set:to:"] = new gelly::builtin::object::SetFieldMethod();
  object.instanceMethods["get:"] = new gelly::builtin::object::GetFieldMethod();
  object.instanceMethods["describe"] = new gelly::builtin::object::DescribeMethod();
  object.instanceMethods["print:"] = new gelly::builtin::object::PrintMethod();
  object.instanceMethods["defineMethods:"] = new gelly::builtin::object::DefineMethods(false);
  return object;
}

class gelly::builtin::object::NewInstanceMethod extends GLMethod {
  new() extends super("new", new Array<String>(), null) {
    this.cls = cls;
  }

  GLObject invoke(GLObject o, Array<GLObject> args) {
    return new GLObject(o.as<GLClass>);
  }
}

class gelly::builtin::object::SetFieldMethod extends GLMethod {
  new() extends super("set:to:", new Array<String>("fieldName", "value"), null) {
  }

  GLObject invoke(GLObject o, Array<GLObject> args) {
    var fieldName = args[0].as<GLString>.value;
    o.setField(fieldName, args[1]);
    return o;
  }
}

class gelly::builtin::object::GetFieldMethod extends GLMethod {
  new() extends super("get:", new Array<String>("fieldName"), null) {
  }

  GLObject invoke(GLObject o, Array<GLObject> args) {
    var fieldName = args[0].as<GLString>.value;
    return o.getField(fieldName);
  }
}

class gelly::builtin::object::DescribeMethod extends GLMethod {
  new() extends super("describe", new Array<String>(), null) {
  }

  GLObject invoke(GLObject o, Array<GLObject> args) {
    return new GLString(o.as<String>);
  }
}

class gelly::builtin::object::PrintMethod extends GLMethod {
  new() extends super("print:", new Array<String>("str"), null) {
  }

  GLObject invoke(GLObject o, Array<GLObject> args) {
    println(args[0].as<String>);
    return o;
  }
}

class gelly::builtin::object::DefineMethods extends GLMethod {
  Bool instanceMethods = true;

  new(Bool instanceMethods) extends super("defineMethods:", new Array<String>("methods"), null) {
    this.instanceMethods = instanceMethods;
  }

  GLObject invoke(GLObject self, Array<GLObject> args) {
    var method = args[0].as<GLMethod>;
    for(MethodDefTerm mdt : method.block.statements) {
      var argNames = new Array<String>(mdt.signature.arguments.length);
      for(Int i = 0; i < argNames.length; i++) {
        argNames[i] = mdt.signature.arguments[i].as<IdnTerm>.idn;
      }
      var newMethod = new GLMethod(mdt.signature.message, argNames, new BlockTerm(mdt.statements));
      if(self instanceof GLClass && instanceMethods) {
        self.as<GLClass>.instanceMethods[mdt.signature.message] = newMethod;
      } else {
        self.methods[mdt.signature.message] = newMethod;
      }
    }
    return self;
  }
}
