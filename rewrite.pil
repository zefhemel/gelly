import "ast.pil"
import "utils.pil"

import gel
import gelly::utils
import gelly::rewrite

class gelly::rewrite::FailException extends Exception {
}

Term gelly::rewrite::replaceMatchVar(Term t, String idnPrefix) {
  if(t instanceof SymbolTerm && stringStartsWith(t.as<SymbolTerm>.symbol, idnPrefix)) {
    return new MatchVarTerm(t.as<SymbolTerm>.symbol);
  } else if(t instanceof ConsTerm) {
    var t2 = t.as<ConsTerm>;
    var ct = t2.clone();
    ct.constructor = replaceMatchVar(ct.constructor, idnPrefix);
    for(Int i = 0; i < ct.children.length; i++) {
      ct.children[i] = replaceMatchVar(ct.children[i], idnPrefix);
    }
    return ct;
  }
  return t;
}

Term gelly::rewrite::apply(Function1<Term, Term> str, Term t) {
  return str(t);
}

Term gelly::rewrite::try(Function1<Term, Term> str, Term t) {
  try {
    return str(t);
  }
  catch(FailException fe) {
    return t;
  }
}

Term gelly::rewrite::all(Function1<Term, Term> str, Term t) {
  if(t instanceof ConsTerm) {
    var trm = t.as<ConsTerm>;
    try {

    }
  }
}

